Question: https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/description/?envType=daily-question&envId=2024-01-10 
Approach: DFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    class Details{
        public:
        int present,height,depth,nodeHeight;
    };
    Details getDetails(TreeNode* root,int start){
        Details d;
        if(root==NULL){
            d.present = 0;
            d.height = 0;
            d.depth = -1;
            d.nodeHeight = -1;  
            return d;
        }
        if(root->val == start){
            d.present = 1;
            d.height = height(root)-1;
            d.depth = d.height;
            d.nodeHeight = 0;
            return d;
        }
        Details left = getDetails(root->left,start);
        Details right = getDetails(root->right,start);

        if(left.present == 1){
            d.present = 1;
            d.height = max(left.height,right.height)+1;
            d.depth = max(d.height-left.nodeHeight-1 ,max(left.depth,left.nodeHeight+height(root->right)+1));
            d.nodeHeight=left.nodeHeight+1;
            d.present = 1;
        } 
        else if(right.present ==1 ){
            d.present = 1;
            d.height = max(right.height,left.height)+1;
            d.depth = max(d.height-right.nodeHeight-1 ,max(right.depth,right.nodeHeight+height(root->left)+1));
            d.nodeHeight=right.nodeHeight+1;
            d.present = 1;
        }
        else{
        d.present = 0;
        d.height = max(left.height,right.height);
        d.depth = -1;
        d.nodeHeight = -1;
        }
        return d;
    }
    int height(TreeNode* root){
        if(root==NULL)
        return 0;
        return 1+ max(height(root->left),height(root->right));
    }
    int amountOfTime(TreeNode* root, int start) {
        if(root->val==start)
        return height(root)-1;
        return getDetails(root,start).depth;
    }
};
