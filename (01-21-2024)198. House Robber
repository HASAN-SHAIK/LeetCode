Question: https://leetcode.com/problems/house-robber/
Approach: Recusrion and DP(Memoisation)
Time: O(n) 
Space: O(n) + O(n*max_sum)

class Solution {
public:
    struct pair_hash {
        template <class T1,class T2>
        size_t operator()(const pair<T1,T2>&p) const {
            auto h1 = hash<T1>{}(p.first);
            auto h2 = hash<T2>{}(p.second);
            return h1^h2;
        }
    };
    int getSum(vector<int> &nums,int index,int sum,unordered_map<pair<int,int>,int,pair_hash> &m){
        if(index+2>=nums.size()){
        return sum;
        }
        pair<int,int> hash = make_pair(index,sum);
        if(m.count(hash))
        return m[hash];
        int left=sum;
        if(index+2<nums.size())
        left = getSum(nums,index+2,sum+nums[index+2],m);
        int right=sum;
        if(index+3<nums.size())
        right = getSum(nums,index+3,sum+nums[index+3],m);
        m[hash] = max(left,right);
        return m[hash];
    }
    int rob(vector<int>& nums) {
       unordered_map<pair<int,int>,int,pair_hash> m;
        int sum= getSum(nums,-2, 0,m);
        return sum;
    }
};

Approach: Tabulation and DP
Time: O(n)
Space: O(1)

class Solution {
public:
    int rob(vector<int>& nums) {
        int a=0;
        int b=0;
        for(int i=0;i<nums.size();i++){
            if(i%2==0)
                a = max(a+nums[i],b);
            else
                b= max(a,b+nums[i]);
        }
        return max(a,b);
    }
};
