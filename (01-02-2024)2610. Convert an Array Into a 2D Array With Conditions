/*Question: https://leetcode.com/problems/convert-an-array-into-a-2d-array-with-conditions/
Approach 1: 
Using Queue and map
Time: O(n^2)
Space: O(n)*/
class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> ans;
        queue<int> queue;
        for(int i=0;i<nums.size();i++)
        queue.push(nums[i]);
        while(!queue.empty()){
            vector<int> row;
            int size=queue.size();
            int idx=0;
            unordered_map<int,int> checked;
            while(idx++<size){
                int element = queue.front();
                if(checked[element]==0){
                    checked[element]=1;
                    row.push_back(element);
                    queue.pop();
                }
                else{
                    queue.pop();
                    queue.push(element);
                }
            }   
            ans.push_back(row);
        }
        return ans;
    }
};


/*
Approach 2:
Using Maps
Time: O(n)
Space: O(n)
*/
class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> ans;
        unordered_map<int,int> checked;
        int max = 0;
        for(int i=0;i<nums.size();i++){
        checked[nums[i]]++;
        if(checked[nums[i]]>max)
        max=checked[nums[i]];
        }
        while(max--){
            vector<int> row;
            for(auto i:checked){
                if(i.second>0)
                row.push_back(i.first);
                checked[i.first]--;
            }
            ans.push_back(row);
        }
        return ans;
    }
};

